import CBOpenSSL.code

//对应官方https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/Before_Develop/Technical_Plan.html的加解密算法

class WXBizMsgCrypt
{
	var m_sToken;
	var m_sEncodingAESKey;
	var m_sAppid;

    //构造函数
    // @param sToken: 公众平台上，开发者设置的Token
    // @param sEncodingAESKey: 公众平台上，开发者设置的EncodingAESKey
    // @param sAppid: 公众号的appid
	function WXBizMsgCrypt(sToken,sEncodingAESKey,sAppid)
	{
		m_sToken = sToken;
		m_sEncodingAESKey = sEncodingAESKey;
		m_sAppid = sAppid;
	}

    // 检验消息的真实性，并且获取解密后的明文
    // @param sMsgSignature: 签名串，对应URL参数的msg_signature
    // @param sTimeStamp: 时间戳，对应URL参数的timestamp
    // @param sNonce: 随机串，对应URL参数的nonce
    // @param sPostData: 密文，对应POST请求的数据
    // @return: 成功返回解密后的原文，失败返回null
	function decryptMsg(sMsgSignature,sTimeStamp,sNonce,sPostData)
	{
		var xmlDoc = new Xml(sPostData);

		var encryptNode = xmlDoc.findChildByPath("xml/Encrypt");
		if (encryptNode == null)
		{
			print "cant't find 'xml/Encrypt' in sPostData!";
			return null;			
		}

		var sEncryptMsg = encryptNode.getValue();
		var strSha1 = getSignature(sTimeStamp,sNonce,sEncryptMsg);
		if (sMsgSignature != strSha1)
		{
			print "sMsgSignature check err!";
			return null;
		}

		//const kEncodingKeySize = 43;
		if (strlen(m_sEncodingAESKey) != 43)
		{
			print "m_sEncodingAESKey len err!";
			return null;			
		}

		var sAesData = base64_decode(sEncryptMsg);
		var srcStr = m_sEncodingAESKey + "=";
		var stcLen = strlen(srcStr);
		var cnt = 0;
		for (var i = stcLen - 1; i >= 0 ; i--)
		{
			var char = strget(srcStr,i,i + 1);
			if (char == "=")
			{
				cnt++;
			}
			else
			{
				break;
			}
		}

		var sAesKey = base64_decode(srcStr);
		var nAesKeyLen = strlen(sAesKey) - cnt;
		if (cnt > 0)
		{
			var byteArray = new ByteArray(nAesKeyLen + cnt);
			byteArray.writeBytes(sAesKey);
			var sAesKey = byteArray.readString(nAesKeyLen);
		}

		//const kAesKeySize = 32;
		if (nAesKeyLen != 32)
		{
			print "nAesKeyLen err!";
			return null;	
		}		
		
		var byteArray = new ByteArray(nAesKeyLen);
		byteArray.writeBytes(sAesKey);
		var iv = byteArray.readString(16);

		//Sleep(1000 * 10);

		var sNoEncryptData = openssl_decrypt_aes_256_cbc(sAesData,sAesKey,iv);
		if (sNoEncryptData == null)
		{
			print "openssl_decrypt_aes_256_cbc err!";
			return null;			
		}

		var dataLen = strlen(sNoEncryptData);
		if (dataLen < 20)
		{
			print "sNoEncryptData len err!";
			return null;
		}

		byteArray = new ByteArray(dataLen);
		byteArray.writeBytes(sNoEncryptData);
		byteArray.setReadPos(16);
		var iMsgLen = byteArray.readInt();
		//print "iMsgLen:" + iMsgLen;
		if (dataLen < 20 + iMsgLen)
		{
			print "sNoEncryptData len err! dataLen < iMsgLen";
			return null;			
		}

		var sMsg = byteArray.readString(iMsgLen);
		//print sMsg;
		var sAppid = byteArray.readString();
		//print sAppid;
		if (sAppid != m_sAppid)
		{
			print "appid err!";
			return null;			
		}

		return sMsg;
	}

    //将公众号回复用户的消息加密打包
    // @param sReplyMsg:公众号待回复用户的消息，xml格式的字符串
    // @param sTimeStamp: 时间戳，可以自己生成，也可以用URL参数的timestamp
    // @param sNonce: 随机串，可以自己生成，也可以用URL参数的nonce
    // return：成功返回加密后的可以直接回复用户的密文，包括msg_signature, timestamp, nonce, encrypt的xml格式的字符串。失败返回null
	function encryptMsg(sReplyMsg,sTimeStamp,sNonce)
	{
		var msgLen = strlen(sReplyMsg);
		var appidLen = strlen(m_sAppid);
		var sNeedEncryptLen = msgLen + appidLen + 20;
		var byteArray = new ByteArray(sNeedEncryptLen);
		//const kRandEncryptStrLen = 16;
		for (var i = 0; i < 16 ; i++)
		{
			var r = math::rand() * 128;
			byteArray.writeByte(r);
		}
		byteArray.writeInt(msgLen);
		byteArray.writeBytes(sReplyMsg,msgLen);
		byteArray.writeBytes(m_sAppid);

		var sNeedEncrypt = byteArray.readString(sNeedEncryptLen);

		//const kEncodingKeySize = 43;
		if (strlen(m_sEncodingAESKey) != 43)
		{
			print "m_sEncodingAESKey len err!";
			return null;			
		}

		var srcStr = m_sEncodingAESKey + "=";
		var stcLen = strlen(srcStr);
		var cnt = 0;
		for (var i = stcLen - 1; i >= 0 ; i--)
		{
			var char = strget(srcStr,i,i + 1);
			if (char == "=")
			{
				cnt++;
			}
			else
			{
				break;
			}
		}

		var sAesKey = base64_decode(srcStr);
		var nAesKeyLen = strlen(sAesKey) - cnt;
		if (cnt > 0)
		{
			byteArray.clear();
			byteArray.writeBytes(sAesKey);
			sAesKey = byteArray.readString(nAesKeyLen);
		}

		//const kAesKeySize = 32;
		if (nAesKeyLen != 32)
		{
			print "nAesKeyLen err!";
			return null;	
		}

		byteArray.clear();
		byteArray.writeBytes(sAesKey);
		var iv = byteArray.readString(16);

		var sAesData = openssl_encrypt_aes_256_cbc(sNeedEncrypt,sAesKey,iv);
		if (sAesData == null)
		{
			print "openssl_encrypt_aes_256_cbc err!";
			return null;			
		}

		var sBase64Data = base64_encode(sAesData);
		var strSha1 = getSignature(sTimeStamp,sNonce,sBase64Data);

		var xml = new Xml();
		var xmlNode = xml.appendChild("xml");

		var encryptNode = xmlNode.appendChild("Encrypt");
		encryptNode.setValue(sBase64Data,true);

		var msgSignaturetNode = xmlNode.appendChild("MsgSignature");
		msgSignaturetNode.setValue(strSha1,true);

		var timeStampNode = xmlNode.appendChild("TimeStamp");
		timeStampNode.setValue(sTimeStamp,true);		

		var nonceNode = xmlNode.appendChild("Nonce");
		nonceNode.setValue(sNonce,true);			

		return xml.toXmlString();
	}	

	function getSignature(sTimeStamp,sNonce,sEncryptMsg)
	{
		//print m_sToken > sTimeStamp;
		//print m_sToken > sNonce;
		//print m_sToken > sEncryptMsg;
		var array = [m_sToken,sTimeStamp,sNonce,sEncryptMsg];

		for(var i = 0 ; i < array.size() - 1 ; i++)
		{
			var minIdx = i;
			for(var j = i + 1 ; j < array.size() ; j++)
			{
				if(array[minIdx] > array[j])
				{
					minIdx = j;
				}
			}

			if(minIdx != i)
			{
				var temp = array[i];
				array[i] = array[minIdx];
				array[minIdx] = temp;
			}
		}

		var str = strjoin(array,"");
		var sha1 = openssl_sha1(str);
		return sha1;	
	}
}

